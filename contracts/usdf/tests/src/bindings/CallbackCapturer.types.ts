/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.11.1.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

export interface AdminResponse {
  admin: string;
  [k: string]: unknown;
}
export type ExecuteMsg =
  | {
      send_msgs: {
        callback_id: string;
        channel_id: string;
        msgs: CosmosMsgForEmpty[];
        [k: string]: unknown;
      };
    }
  | {
      check_remote_balance: {
        channel_id: string;
        [k: string]: unknown;
      };
    }
  | {
      ibc_query: {
        callback_id: string;
        channel_id: string;
        msgs: QueryRequestForEmpty[];
        [k: string]: unknown;
      };
    }
  | {
      send_funds: {
        ica_channel_id: string;
        transfer_channel_id: string;
        [k: string]: unknown;
      };
    }
  | {
      receive_ica_response: ReceiveIcaResponseMsg;
    };
export type CosmosMsgForEmpty =
  | {
      bank: BankMsg;
    }
  | {
      custom: Empty;
    }
  | {
      staking: StakingMsg;
    }
  | {
      distribution: DistributionMsg;
    }
  | {
      stargate: {
        type_url: string;
        value: Binary;
        [k: string]: unknown;
      };
    }
  | {
      ibc: IbcMsg;
    }
  | {
      wasm: WasmMsg;
    }
  | {
      gov: GovMsg;
    };
export type BankMsg =
  | {
      send: {
        amount: Coin[];
        to_address: string;
        [k: string]: unknown;
      };
    }
  | {
      burn: {
        amount: Coin[];
        [k: string]: unknown;
      };
    };
export type Uint128 = string;
export type StakingMsg =
  | {
      delegate: {
        amount: Coin;
        validator: string;
        [k: string]: unknown;
      };
    }
  | {
      undelegate: {
        amount: Coin;
        validator: string;
        [k: string]: unknown;
      };
    }
  | {
      redelegate: {
        amount: Coin;
        dst_validator: string;
        src_validator: string;
        [k: string]: unknown;
      };
    };
export type DistributionMsg =
  | {
      set_withdraw_address: {
        address: string;
        [k: string]: unknown;
      };
    }
  | {
      withdraw_delegator_reward: {
        validator: string;
        [k: string]: unknown;
      };
    };
export type Binary = string;
export type IbcMsg =
  | {
      transfer: {
        amount: Coin;
        channel_id: string;
        timeout: IbcTimeout;
        to_address: string;
        [k: string]: unknown;
      };
    }
  | {
      send_packet: {
        channel_id: string;
        data: Binary;
        timeout: IbcTimeout;
        [k: string]: unknown;
      };
    }
  | {
      close_channel: {
        channel_id: string;
        [k: string]: unknown;
      };
    };
export type Timestamp = Uint64;
export type Uint64 = string;
export type WasmMsg =
  | {
      execute: {
        contract_addr: string;
        funds: Coin[];
        msg: Binary;
        [k: string]: unknown;
      };
    }
  | {
      instantiate: {
        admin?: string | null;
        code_id: number;
        funds: Coin[];
        label: string;
        msg: Binary;
        [k: string]: unknown;
      };
    }
  | {
      migrate: {
        contract_addr: string;
        msg: Binary;
        new_code_id: number;
        [k: string]: unknown;
      };
    }
  | {
      update_admin: {
        admin: string;
        contract_addr: string;
        [k: string]: unknown;
      };
    }
  | {
      clear_admin: {
        contract_addr: string;
        [k: string]: unknown;
      };
    };
export type GovMsg = {
  vote: {
    proposal_id: number;
    vote: VoteOption;
    [k: string]: unknown;
  };
};
export type VoteOption = "yes" | "no" | "abstain" | "no_with_veto";
export type QueryRequestForEmpty =
  | {
      bank: BankQuery;
    }
  | {
      custom: Empty;
    }
  | {
      staking: StakingQuery;
    }
  | {
      stargate: {
        data: Binary;
        path: string;
        [k: string]: unknown;
      };
    }
  | {
      ibc: IbcQuery;
    }
  | {
      wasm: WasmQuery;
    };
export type BankQuery =
  | {
      balance: {
        address: string;
        denom: string;
        [k: string]: unknown;
      };
    }
  | {
      all_balances: {
        address: string;
        [k: string]: unknown;
      };
    };
export type StakingQuery =
  | {
      bonded_denom: {
        [k: string]: unknown;
      };
    }
  | {
      all_delegations: {
        delegator: string;
        [k: string]: unknown;
      };
    }
  | {
      delegation: {
        delegator: string;
        validator: string;
        [k: string]: unknown;
      };
    }
  | {
      all_validators: {
        [k: string]: unknown;
      };
    }
  | {
      validator: {
        address: string;
        [k: string]: unknown;
      };
    };
export type IbcQuery =
  | {
      port_id: {
        [k: string]: unknown;
      };
    }
  | {
      list_channels: {
        port_id?: string | null;
        [k: string]: unknown;
      };
    }
  | {
      channel: {
        channel_id: string;
        port_id?: string | null;
        [k: string]: unknown;
      };
    };
export type WasmQuery =
  | {
      smart: {
        contract_addr: string;
        msg: Binary;
        [k: string]: unknown;
      };
    }
  | {
      raw: {
        contract_addr: string;
        key: Binary;
        [k: string]: unknown;
      };
    }
  | {
      contract_info: {
        contract_addr: string;
        [k: string]: unknown;
      };
    };
export type StdAck =
  | {
      result: Binary;
    }
  | {
      error: string;
    };
export interface Coin {
  amount: Uint128;
  denom: string;
  [k: string]: unknown;
}
export interface Empty {
  [k: string]: unknown;
}
export interface IbcTimeout {
  block?: IbcTimeoutBlock | null;
  timestamp?: Timestamp | null;
  [k: string]: unknown;
}
export interface IbcTimeoutBlock {
  height: number;
  revision: number;
  [k: string]: unknown;
}
export interface ReceiveIcaResponseMsg {
  id: string;
  msg: StdAck;
  [k: string]: unknown;
}
export interface InstantiateMsg {
  simple_ica_controller: string;
  [k: string]: unknown;
}
export type QueryMsg =
  | {
      admin: {
        [k: string]: unknown;
      };
    }
  | {
      result: {
        id: string;
        [k: string]: unknown;
      };
    };
export interface ResultResponse {
  result: StdAck;
  [k: string]: unknown;
}
